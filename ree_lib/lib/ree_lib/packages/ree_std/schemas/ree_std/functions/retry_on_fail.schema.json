{
  "schema_type": "object",
  "schema_version": "1.1",
  "name": "retry_on_fail",
  "path": "packages/ree_std/package/ree_std/functions/retry_on_fail.rb",
  "mount_as": "fn",
  "class": "ReeStd::RetryOnFail",
  "factory": null,
  "methods": [
    {
      "doc": "## **Ruby Function: retry_on_fail**\n\nThis function allows you to execute a provided block of code and automatically retry it in case a specific exception occurs.\n\nrubyCopy code\n\n`x = 0 retry_on_fail(max: 2, retry_block: ->(attempt, e) { x += 1 } ) { 1 / x }`\n\n## **Parameters**\n\n*   **max** (Integer, required): Specifies the maximum number of retry attempts.\n*   **interval** (Integer, optional, default: 1): Sets the base delay between retry attempts in seconds.\n*   **max_interval** (Integer, optional, default: Float::INFINITY): Defines the upper limit for the delay between retry attempts.\n*   **backoff_factor** (Integer, optional, default: 1): Determines the increasing factor for the delay based on the attempt number.\n*   **exceptions** (StandardError[], optional, default: [StandardError]): Specifies a list of exceptions that should trigger a retry.\n*   **retry_block** (Proc, optional, default: **Proc.new {|attempt_number, exception|}**): Allows you to provide a custom block of code to be executed after a failed attempt.\n*   **retry_if** (Proc, optional, default: **Proc.new { |exception| true }**): Provides an additional condition that must be satisfied before initiating a new retry attempt.",
      "throws": [

      ],
      "return": "Any",
      "args": [
        {
          "arg": "max",
          "arg_type": "keyreq",
          "type": "Integer"
        },
        {
          "arg": "opts",
          "arg_type": "keyrest",
          "type": "Ksplat[:interval? => Integer, :max_interval? => Integer, :backoff_factor? => Integer, :exceptions? => ArrayOf[SubclassOf[StandardError]], :retry_block? => Proc, :retry_if? => Proc]"
        },
        {
          "arg": "block",
          "arg_type": "block",
          "type": "Block"
        }
      ]
    }
  ],
  "links": [

  ]
}